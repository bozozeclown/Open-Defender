# docker-compose.yml
version: '3.8'

services:
  security-monitoring:
    build: .
    container_name: security-monitoring
    ports:
      - "8443:8443"   # HTTPS only
    environment:
      - CONFIG_PATH=/app/config/config.yaml
      - SERVICES_CONFIG_PATH=/app/config/services.yaml
      - PORTS_CONFIG_PATH=/app/config/ports.yaml
      - SECURITY_CONFIG_PATH=/app/config/security.yaml
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RUST_LOG=info
      - VAULT_URL=${VAULT_URL}
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/var/log/security-monitoring
      - ./certs:/app/certs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - security-backend
      - security-monitoring
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_DB=security_monitoring
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    secrets:
      - postgres_password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - security-backend
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - security-backend
    security_opt:
      - no-new-privileges:true

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/file
    networks:
      - security-backend
    cap_add:
      - IPC_LOCK
    security_opt:
      - no-new-privileges:true

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - security-monitoring
    networks:
      - security-monitoring
    security_opt:
      - no-new-privileges:true

volumes:
  postgres_data:
  redis_data:
  vault_data:

networks:
  security-backend:
    driver: bridge
    internal: true
  security-monitoring:
    driver: bridge

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt