version: "3.9"

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  vault_token:
    file: ./secrets/vault_token.txt
  grafana_password:
    file: ./secrets/grafana_password.txt

services:
  security-monitoring:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: security-monitoring
    environment:
      - DATABASE_URL=postgresql://security_user:${POSTGRES_PASSWORD}@postgres:5432/security_monitoring?sslmode=require
      - RUST_LOG=info
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - VAULT_TOKEN_FILE=/run/secrets/vault_token
    secrets:
      - jwt_secret
      - vault_token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M
    networks:
      - security-network

  postgres:
    image: postgres:15
    container_name: security-monitoring-postgres
    environment:
      - POSTGRES_DB=security_monitoring
      - POSTGRES_USER=security_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
    secrets:
      - postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U security_user -d security_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - security-network

  redis:
    image: redis:7-alpine
    container_name: security-monitoring-redis
    command: ["redis-server", "--requirepass", "$(cat /run/secrets/redis_password)"]
    secrets:
      - redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - security-network

volumes:
  postgres-data:
    driver: local

networks:
  security-network:
    driver: bridge
